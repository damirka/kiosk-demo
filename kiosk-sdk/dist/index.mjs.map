{"version":3,"sources":["../src/utils.ts","../src/tx/kiosk.ts","../src/tx/transfer-policy.ts","../src/query/kiosk.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  SharedObjectRef,\n  SuiObjectRef,\n  TransactionArgument,\n  TransactionBlock,\n} from '@mysten/sui.js';\n\n/**\n * A valid argument for any of the Kiosk functions.\n */\nexport type ObjectArgument =\n  | string\n  | TransactionArgument\n  | SharedObjectRef\n  | SuiObjectRef;\n\n/**\n * Convert any valid input into a TransactionArgument.\n *\n * @param tx The transaction to use for creating the argument.\n * @param arg The argument to convert.\n * @returns The converted TransactionArgument.\n */\nexport function objArg(\n  tx: TransactionBlock,\n  arg: string | SharedObjectRef | SuiObjectRef | TransactionArgument,\n): TransactionArgument {\n  if (typeof arg === 'string') {\n    return tx.object(arg);\n  }\n\n  if ('digest' in arg && 'version' in arg && 'objectId' in arg) {\n    return tx.objectRef(arg);\n  }\n\n  if ('objectId' in arg && 'initialSharedVersion' in arg && 'mutable' in arg) {\n    return tx.sharedObjectRef(arg);\n  }\n\n  if ('kind' in arg) {\n    return arg;\n  }\n\n  throw new Error('Invalid argument type');\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  SuiAddress,\n  TransactionArgument,\n  TransactionBlock,\n} from '@mysten/sui.js';\n\nimport { ObjectArgument, objArg } from '../utils';\n\n/** The Kiosk module. */\nexport const KIOSK_MODULE = '0x2::kiosk';\n\n/** The Kiosk type. */\nexport const KIOSK_TYPE = `${KIOSK_MODULE}::Kiosk`;\n\n/** The Kiosk Owner Cap Type */\nexport const KIOSK_OWNER_CAP = `${KIOSK_MODULE}::KioskOwnerCap`;\n\n/**\n * Create a new shared Kiosk and returns the [kiosk, kioskOwnerCap] tuple.\n */\nexport function createKiosk(\n  tx: TransactionBlock,\n): [TransactionArgument, TransactionArgument] {\n  let [kiosk, kioskOwnerCap] = tx.moveCall({\n    target: `${KIOSK_MODULE}::new`,\n  });\n\n  return [kiosk, kioskOwnerCap];\n}\n\n/**\n * Calls the `kiosk::new()` function and shares the kiosk.\n * Returns the `kioskOwnerCap` object.\n */\nexport function createKioskAndShare(tx: TransactionBlock): TransactionArgument {\n  let [kiosk, kioskOwnerCap] = tx.moveCall({\n    target: `${KIOSK_MODULE}::new`,\n  });\n\n  tx.moveCall({\n    target: `0x2::transfer::public_share_object`,\n    typeArguments: [KIOSK_TYPE],\n    arguments: [kiosk],\n  });\n\n  return kioskOwnerCap;\n}\n\n/**\n * Call the `kiosk::place<T>(Kiosk, KioskOwnerCap, Item)` function.\n * Place an item to the Kiosk.\n */\nexport function place(\n  tx: TransactionBlock,\n  itemType: string,\n  kiosk: ObjectArgument,\n  kioskCap: ObjectArgument,\n  item: ObjectArgument,\n): void {\n  tx.moveCall({\n    target: `${KIOSK_MODULE}::place`,\n    typeArguments: [itemType],\n    arguments: [objArg(tx, kiosk), objArg(tx, kioskCap), objArg(tx, item)],\n  });\n}\n\n/**\n * Call the `kiosk::lock<T>(Kiosk, KioskOwnerCap, TransferPolicy, Item)`\n * function. Lock an item in the Kiosk.\n *\n * Unlike `place` this function requires a `TransferPolicy` to exist\n * and be passed in. This is done to make sure the item does not get\n * locked without an option to take it out.\n */\nexport function lock(\n  tx: TransactionBlock,\n  itemType: string,\n  kiosk: ObjectArgument,\n  kioskCap: ObjectArgument,\n  policy: ObjectArgument,\n  item: ObjectArgument,\n): void {\n  tx.moveCall({\n    target: `${KIOSK_MODULE}::lock`,\n    typeArguments: [itemType],\n    arguments: [\n      objArg(tx, kiosk),\n      objArg(tx, kioskCap),\n      objArg(tx, policy),\n      objArg(tx, item),\n    ],\n  });\n}\n\n/**\n * Call the `kiosk::take<T>(Kiosk, KioskOwnerCap, ID)` function.\n * Take an item from the Kiosk.\n */\nexport function take(\n  tx: TransactionBlock,\n  itemType: string,\n  kiosk: ObjectArgument,\n  kioskCap: ObjectArgument,\n  itemId: SuiAddress,\n): TransactionArgument {\n  let [item] = tx.moveCall({\n    target: `${KIOSK_MODULE}::take`,\n    typeArguments: [itemType],\n    arguments: [\n      objArg(tx, kiosk),\n      objArg(tx, kioskCap),\n      tx.pure(itemId, 'address'),\n    ],\n  });\n\n  return item;\n}\n\n/**\n * Call the `kiosk::list<T>(Kiosk, KioskOwnerCap, ID, u64)` function.\n * List an item for sale.\n */\nexport function list(\n  tx: TransactionBlock,\n  itemType: string,\n  kiosk: ObjectArgument,\n  kioskCap: ObjectArgument,\n  itemId: SuiAddress,\n  price: string | bigint,\n): void {\n  tx.moveCall({\n    target: `${KIOSK_MODULE}::list`,\n    typeArguments: [itemType],\n    arguments: [\n      objArg(tx, kiosk),\n      objArg(tx, kioskCap),\n      tx.pure(itemId, 'address'),\n      tx.pure(price, 'u64'),\n    ],\n  });\n}\n\n/**\n * Call the `kiosk::list<T>(Kiosk, KioskOwnerCap, ID, u64)` function.\n * List an item for sale.\n */\nexport function delist(\n  tx: TransactionBlock,\n  itemType: string,\n  kiosk: ObjectArgument,\n  kioskCap: ObjectArgument,\n  itemId: SuiAddress\n): void {\n  tx.moveCall({\n    target: `${KIOSK_MODULE}::delist`,\n    typeArguments: [itemType],\n    arguments: [\n      objArg(tx, kiosk),\n      objArg(tx, kioskCap),\n      tx.pure(itemId, 'address')\n    ],\n  });\n}\n\n\n/**\n * Call the `kiosk::place_and_list<T>(Kiosk, KioskOwnerCap, Item, u64)` function.\n * Place an item to the Kiosk and list it for sale.\n */\nexport function placeAndList(\n  tx: TransactionBlock,\n  itemType: string,\n  kiosk: ObjectArgument,\n  kioskCap: ObjectArgument,\n  item: ObjectArgument,\n  price: string | bigint,\n): void {\n  tx.moveCall({\n    target: `${KIOSK_MODULE}::place_and_list`,\n    typeArguments: [itemType],\n    arguments: [\n      objArg(tx, kiosk),\n      objArg(tx, kioskCap),\n      objArg(tx, item),\n      tx.pure(price, 'u64'),\n    ],\n  });\n}\n\n/**\n * Call the `kiosk::purchase<T>(Kiosk, ID, Coin<SUI>)` function and receive an Item and\n * a TransferRequest which needs to be dealt with (via a matching TransferPolicy).\n */\nexport function purchase(\n  tx: TransactionBlock,\n  itemType: string,\n  kiosk: ObjectArgument,\n  itemId: SuiAddress,\n  payment: ObjectArgument,\n): [TransactionArgument, TransactionArgument] {\n  let [item, transferRequest] = tx.moveCall({\n    target: `${KIOSK_MODULE}::purchase`,\n    typeArguments: [itemType],\n    arguments: [\n      objArg(tx, kiosk),\n      tx.pure(itemId, 'address'),\n      objArg(tx, payment),\n    ],\n  });\n\n  return [item, transferRequest];\n}\n\n/**\n * Call the `kiosk::withdraw(Kiosk, KioskOwnerCap, Option<u64>)` function and receive a Coin<SUI>.\n * If the amount is null, then the entire balance will be withdrawn.\n */\nexport function withdrawFromKiosk(\n  tx: TransactionBlock,\n  kiosk: ObjectArgument,\n  kioskCap: ObjectArgument,\n  amount: string | bigint | null,\n): TransactionArgument {\n\n  let amountArg = amount !== null ? tx.pure(amount, 'Option<u64>') : tx.pure({ None: true }, 'Option<u64>');\n\n  let [coin] = tx.moveCall({\n    target: `${KIOSK_MODULE}::withdraw`,\n    arguments: [objArg(tx, kiosk), objArg(tx, kioskCap), amountArg],\n  });\n\n  return coin;\n}\n\n/**\n * Call the `kiosk::borrow<T>(Kiosk, KioskOwnerCap, ID): &T` function.\n * Immutably borrow an item from the Kiosk.\n */\nexport function borrow(\n  tx: TransactionBlock,\n  itemType: string,\n  kiosk: ObjectArgument,\n  kioskCap: ObjectArgument,\n  itemId: SuiAddress,\n): TransactionArgument {\n  let [item] = tx.moveCall({\n    target: `${KIOSK_MODULE}::borrow`,\n    typeArguments: [itemType],\n    arguments: [\n      objArg(tx, kiosk),\n      objArg(tx, kioskCap),\n      tx.pure(itemId, 'address'),\n    ],\n  });\n\n  return item;\n}\n\n/**\n * Call the `kiosk::borrow_mut<T>(Kiosk, KioskOwnerCap, ID): &mut T` function.\n * Mutably borrow an item from the Kiosk.\n */\nexport function borrowMut(\n  tx: TransactionBlock,\n  itemType: string,\n  kiosk: ObjectArgument,\n  kioskCap: ObjectArgument,\n  itemId: SuiAddress,\n): TransactionArgument {\n  let [item] = tx.moveCall({\n    target: `${KIOSK_MODULE}::borrow_mut`,\n    typeArguments: [itemType],\n    arguments: [\n      objArg(tx, kiosk),\n      objArg(tx, kioskCap),\n      tx.pure(itemId, 'address'),\n    ],\n  });\n\n  return item;\n}\n\n/**\n * Call the `kiosk::borrow_value<T>(Kiosk, KioskOwnerCap, ID): T` function.\n * Immutably borrow an item from the Kiosk and return it in the end.\n *\n * Requires calling `returnValue` to return the item.\n */\nexport function borrowValue(\n  tx: TransactionBlock,\n  itemType: string,\n  kiosk: ObjectArgument,\n  kioskCap: ObjectArgument,\n  itemId: SuiAddress,\n): [TransactionArgument, TransactionArgument] {\n  let [item, promise] = tx.moveCall({\n    target: `${KIOSK_MODULE}::borrow_val`,\n    typeArguments: [itemType],\n    arguments: [\n      objArg(tx, kiosk),\n      objArg(tx, kioskCap),\n      tx.pure(itemId, 'address'),\n    ],\n  });\n\n  return [item, promise];\n}\n\n/**\n * Call the `kiosk::return_value<T>(Kiosk, Item, Borrow)` function.\n * Return an item to the Kiosk after it was `borrowValue`-d.\n */\nexport function returnValue(\n  tx: TransactionBlock,\n  itemType: string,\n  kiosk: ObjectArgument,\n  item: TransactionArgument,\n  promise: TransactionArgument,\n): void {\n  tx.moveCall({\n    target: `${KIOSK_MODULE}::return_val`,\n    typeArguments: [itemType],\n    arguments: [objArg(tx, kiosk), item, promise],\n  });\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { TransactionArgument, TransactionBlock } from '@mysten/sui.js';\nimport { ObjectArgument, objArg } from '../utils';\n\n/** The Transfer Policy module. */\nexport const TRANSFER_POLICY_MODULE = '0x2::transfer_policy';\n\n/**\n * Call the `transfer_policy::new` function to create a new transfer policy.\n * Returns `transferPolicyCap`\n */\nexport function createTransferPolicy(\n    tx: TransactionBlock,\n    itemType: string,\n    publisher: ObjectArgument,\n): TransactionArgument {\n    let [transferPolicy, transferPolicyCap] = tx.moveCall({\n        target: `${TRANSFER_POLICY_MODULE}::new`,\n        typeArguments: [itemType],\n        arguments: [objArg(tx, publisher)],\n    });\n\n    tx.moveCall({\n        target: `0x2::transfer::public_share_object`,\n        typeArguments: [itemType],\n        arguments: [transferPolicy],\n    });\n\n    return transferPolicyCap;\n}\n\n/**\n * Call the `transfer_policy::withdraw` function to withdraw profits from a transfer policy.\n */\nexport function withdrawFromPolicy(\n    tx: TransactionBlock,\n    itemType: string,\n    policy: ObjectArgument,\n    policyCap: ObjectArgument,\n    amount: string | bigint | null,\n): TransactionArgument {\n\n    let amountArg = amount !== null ? tx.pure(amount, 'Option<u64>') : tx.pure({ None: true }, 'Option<u64>');\n\n    let [profits] = tx.moveCall({\n        target: `${TRANSFER_POLICY_MODULE}::withdraw`,\n        typeArguments: [itemType],\n        arguments: [\n            objArg(tx, policy),\n            objArg(tx, policyCap),\n            amountArg\n        ],\n    });\n\n    return profits;\n}\n\n/**\n * Call the `transfer_policy::confirm_request` function to unblock the\n * transaction.\n */\nexport function confirmRequest(\n    tx: TransactionBlock,\n    itemType: string,\n    policy: ObjectArgument,\n    request: TransactionArgument\n): void {\n    tx.moveCall({\n        target: `${TRANSFER_POLICY_MODULE}::confirm_request`,\n        typeArguments: [itemType],\n        arguments: [objArg(tx, policy), request],\n    });\n}\n\n/**\n * Calls the `transfer_policy::remove_rule` function to remove a Rule from the transfer policy's ruleset.\n */\nexport function removeTransferPolicyRule(\n    tx: TransactionBlock,\n    itemType: string,\n    ruleType: string,\n    configType: string,\n    policy: ObjectArgument,\n    policyCap: TransactionArgument\n): void {\n\n    tx.moveCall({\n        target: `${TRANSFER_POLICY_MODULE}::remove_rule`,\n        typeArguments: [\n            itemType,\n            ruleType,\n            configType,\n        ],\n        arguments: [objArg(tx, policy), policyCap],\n    });\n\n}\n\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  JsonRpcProvider,\n  PaginationArguments,\n  SuiAddress,\n} from '@mysten/sui.js';\n\n/**\n * A dynamic field `Listing { ID, isExclusive }` attached to the Kiosk.\n * Holds a `u64` value - the price of the item.\n */\nexport type KioskListing = {\n  /** The ID of the Item */\n  itemId: string;\n  /**\n   * Whether or not there's a `PurchaseCap` issued. `true` means that\n   * the listing is controlled by some logic and can't be purchased directly.\n   *\n   * TODO: consider renaming the field for better indication.\n   */\n  isExclusive: boolean;\n\n  /** The ID of the listing */\n  listingId: string;\n  /** Can be used to query a dynamic field */\n  bcsName: string;\n};\n\n/**\n * A dynamic field `Item { ID }` attached to the Kiosk.\n * Holds an Item `T`. The type of the item is known upfront.\n */\nexport type KioskItem = {\n  /** The ID of the Item */\n  itemId: string;\n  /** The type of the Item */\n  itemType: string;\n  /** Can be used to query a dynamic field */\n  bcsName: string;\n};\n\n/**\n * Aggregated data from the Kiosk.\n */\nexport type KioskData = {\n  items: KioskItem[];\n  listings: KioskListing[];\n  itemIds: string[];\n  listingIds: string[];\n};\n\nexport type PagedKioskData = {\n  data: KioskData;\n  nextCursor: string | null;\n  hasNextPage: boolean;\n};\n\nexport async function fetchKiosk(\n  provider: JsonRpcProvider,\n  kioskId: SuiAddress,\n  pagination: PaginationArguments<string>,\n): Promise<PagedKioskData> {\n  const { data, nextCursor, hasNextPage } = await provider.getDynamicFields({\n    parentId: kioskId,\n    ...pagination,\n  });\n\n  const kioskData = data.reduce<KioskData>(\n    (acc, val) => {\n      // ignore package address because sometimes it was 0x2, other 0x000...02\n      const type = val.name.type.split('::').slice(-2).join('::');\n      \n      switch (type) {\n        case 'kiosk::Item':\n          acc.itemIds.push(val.objectId);\n          acc.items.push({\n            itemId: val.objectId,\n            itemType: val.objectType,\n            bcsName: val.bcsName,\n          });\n          break;\n        case 'kiosk::Listing':\n          acc.listingIds.push(val.objectId);\n          acc.listings.push({\n            itemId: val.name.value.id,\n            listingId: val.objectId,\n            isExclusive: val.name.value.is_exclusive,\n            bcsName: val.bcsName,\n          });\n          break;\n      }\n      return acc;\n    },\n    { listings: [], items: [], itemIds: [], listingIds: [] },\n  );\n\n  return {\n    data: kioskData,\n    nextCursor,\n    hasNextPage,\n  };\n}\n"],"mappings":";AA0BO,SAAS,OACd,IACA,KACqB;AACrB,MAAI,OAAO,QAAQ,UAAU;AAC3B,WAAO,GAAG,OAAO,GAAG;AAAA,EACtB;AAEA,MAAI,YAAY,OAAO,aAAa,OAAO,cAAc,KAAK;AAC5D,WAAO,GAAG,UAAU,GAAG;AAAA,EACzB;AAEA,MAAI,cAAc,OAAO,0BAA0B,OAAO,aAAa,KAAK;AAC1E,WAAO,GAAG,gBAAgB,GAAG;AAAA,EAC/B;AAEA,MAAI,UAAU,KAAK;AACjB,WAAO;AAAA,EACT;AAEA,QAAM,IAAI,MAAM,uBAAuB;AACzC;;;ACnCO,IAAM,eAAe;AAGrB,IAAM,aAAa,GAAG;AAGtB,IAAM,kBAAkB,GAAG;AAK3B,SAAS,YACd,IAC4C;AAC5C,MAAI,CAAC,OAAO,aAAa,IAAI,GAAG,SAAS;AAAA,IACvC,QAAQ,GAAG;AAAA,EACb,CAAC;AAED,SAAO,CAAC,OAAO,aAAa;AAC9B;AAMO,SAAS,oBAAoB,IAA2C;AAC7E,MAAI,CAAC,OAAO,aAAa,IAAI,GAAG,SAAS;AAAA,IACvC,QAAQ,GAAG;AAAA,EACb,CAAC;AAED,KAAG,SAAS;AAAA,IACV,QAAQ;AAAA,IACR,eAAe,CAAC,UAAU;AAAA,IAC1B,WAAW,CAAC,KAAK;AAAA,EACnB,CAAC;AAED,SAAO;AACT;AAMO,SAAS,MACd,IACA,UACA,OACA,UACA,MACM;AACN,KAAG,SAAS;AAAA,IACV,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW,CAAC,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,QAAQ,GAAG,OAAO,IAAI,IAAI,CAAC;AAAA,EACvE,CAAC;AACH;AAUO,SAAS,KACd,IACA,UACA,OACA,UACA,QACA,MACM;AACN,KAAG,SAAS;AAAA,IACV,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW;AAAA,MACT,OAAO,IAAI,KAAK;AAAA,MAChB,OAAO,IAAI,QAAQ;AAAA,MACnB,OAAO,IAAI,MAAM;AAAA,MACjB,OAAO,IAAI,IAAI;AAAA,IACjB;AAAA,EACF,CAAC;AACH;AAMO,SAAS,KACd,IACA,UACA,OACA,UACA,QACqB;AACrB,MAAI,CAAC,IAAI,IAAI,GAAG,SAAS;AAAA,IACvB,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW;AAAA,MACT,OAAO,IAAI,KAAK;AAAA,MAChB,OAAO,IAAI,QAAQ;AAAA,MACnB,GAAG,KAAK,QAAQ,SAAS;AAAA,IAC3B;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAMO,SAAS,KACd,IACA,UACA,OACA,UACA,QACA,OACM;AACN,KAAG,SAAS;AAAA,IACV,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW;AAAA,MACT,OAAO,IAAI,KAAK;AAAA,MAChB,OAAO,IAAI,QAAQ;AAAA,MACnB,GAAG,KAAK,QAAQ,SAAS;AAAA,MACzB,GAAG,KAAK,OAAO,KAAK;AAAA,IACtB;AAAA,EACF,CAAC;AACH;AAMO,SAAS,OACd,IACA,UACA,OACA,UACA,QACM;AACN,KAAG,SAAS;AAAA,IACV,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW;AAAA,MACT,OAAO,IAAI,KAAK;AAAA,MAChB,OAAO,IAAI,QAAQ;AAAA,MACnB,GAAG,KAAK,QAAQ,SAAS;AAAA,IAC3B;AAAA,EACF,CAAC;AACH;AAOO,SAAS,aACd,IACA,UACA,OACA,UACA,MACA,OACM;AACN,KAAG,SAAS;AAAA,IACV,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW;AAAA,MACT,OAAO,IAAI,KAAK;AAAA,MAChB,OAAO,IAAI,QAAQ;AAAA,MACnB,OAAO,IAAI,IAAI;AAAA,MACf,GAAG,KAAK,OAAO,KAAK;AAAA,IACtB;AAAA,EACF,CAAC;AACH;AAMO,SAAS,SACd,IACA,UACA,OACA,QACA,SAC4C;AAC5C,MAAI,CAAC,MAAM,eAAe,IAAI,GAAG,SAAS;AAAA,IACxC,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW;AAAA,MACT,OAAO,IAAI,KAAK;AAAA,MAChB,GAAG,KAAK,QAAQ,SAAS;AAAA,MACzB,OAAO,IAAI,OAAO;AAAA,IACpB;AAAA,EACF,CAAC;AAED,SAAO,CAAC,MAAM,eAAe;AAC/B;AAMO,SAAS,kBACd,IACA,OACA,UACA,QACqB;AAErB,MAAI,YAAY,WAAW,OAAO,GAAG,KAAK,QAAQ,aAAa,IAAI,GAAG,KAAK,EAAE,MAAM,KAAK,GAAG,aAAa;AAExG,MAAI,CAAC,IAAI,IAAI,GAAG,SAAS;AAAA,IACvB,QAAQ,GAAG;AAAA,IACX,WAAW,CAAC,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,QAAQ,GAAG,SAAS;AAAA,EAChE,CAAC;AAED,SAAO;AACT;AAMO,SAAS,OACd,IACA,UACA,OACA,UACA,QACqB;AACrB,MAAI,CAAC,IAAI,IAAI,GAAG,SAAS;AAAA,IACvB,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW;AAAA,MACT,OAAO,IAAI,KAAK;AAAA,MAChB,OAAO,IAAI,QAAQ;AAAA,MACnB,GAAG,KAAK,QAAQ,SAAS;AAAA,IAC3B;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAMO,SAAS,UACd,IACA,UACA,OACA,UACA,QACqB;AACrB,MAAI,CAAC,IAAI,IAAI,GAAG,SAAS;AAAA,IACvB,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW;AAAA,MACT,OAAO,IAAI,KAAK;AAAA,MAChB,OAAO,IAAI,QAAQ;AAAA,MACnB,GAAG,KAAK,QAAQ,SAAS;AAAA,IAC3B;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAQO,SAAS,YACd,IACA,UACA,OACA,UACA,QAC4C;AAC5C,MAAI,CAAC,MAAM,OAAO,IAAI,GAAG,SAAS;AAAA,IAChC,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW;AAAA,MACT,OAAO,IAAI,KAAK;AAAA,MAChB,OAAO,IAAI,QAAQ;AAAA,MACnB,GAAG,KAAK,QAAQ,SAAS;AAAA,IAC3B;AAAA,EACF,CAAC;AAED,SAAO,CAAC,MAAM,OAAO;AACvB;AAMO,SAAS,YACd,IACA,UACA,OACA,MACA,SACM;AACN,KAAG,SAAS;AAAA,IACV,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW,CAAC,OAAO,IAAI,KAAK,GAAG,MAAM,OAAO;AAAA,EAC9C,CAAC;AACH;;;AChUO,IAAM,yBAAyB;AAM/B,SAAS,qBACZ,IACA,UACA,WACmB;AACnB,MAAI,CAAC,gBAAgB,iBAAiB,IAAI,GAAG,SAAS;AAAA,IAClD,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW,CAAC,OAAO,IAAI,SAAS,CAAC;AAAA,EACrC,CAAC;AAED,KAAG,SAAS;AAAA,IACR,QAAQ;AAAA,IACR,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW,CAAC,cAAc;AAAA,EAC9B,CAAC;AAED,SAAO;AACX;AAKO,SAAS,mBACZ,IACA,UACA,QACA,WACA,QACmB;AAEnB,MAAI,YAAY,WAAW,OAAO,GAAG,KAAK,QAAQ,aAAa,IAAI,GAAG,KAAK,EAAE,MAAM,KAAK,GAAG,aAAa;AAExG,MAAI,CAAC,OAAO,IAAI,GAAG,SAAS;AAAA,IACxB,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW;AAAA,MACP,OAAO,IAAI,MAAM;AAAA,MACjB,OAAO,IAAI,SAAS;AAAA,MACpB;AAAA,IACJ;AAAA,EACJ,CAAC;AAED,SAAO;AACX;AAMO,SAAS,eACZ,IACA,UACA,QACA,SACI;AACJ,KAAG,SAAS;AAAA,IACR,QAAQ,GAAG;AAAA,IACX,eAAe,CAAC,QAAQ;AAAA,IACxB,WAAW,CAAC,OAAO,IAAI,MAAM,GAAG,OAAO;AAAA,EAC3C,CAAC;AACL;AAKO,SAAS,yBACZ,IACA,UACA,UACA,YACA,QACA,WACI;AAEJ,KAAG,SAAS;AAAA,IACR,QAAQ,GAAG;AAAA,IACX,eAAe;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,IACA,WAAW,CAAC,OAAO,IAAI,MAAM,GAAG,SAAS;AAAA,EAC7C,CAAC;AAEL;;;ACvCA,eAAsB,WACpB,UACA,SACA,YACyB;AACzB,QAAM,EAAE,MAAM,YAAY,YAAY,IAAI,MAAM,SAAS,iBAAiB;AAAA,IACxE,UAAU;AAAA,IACV,GAAG;AAAA,EACL,CAAC;AAED,QAAM,YAAY,KAAK;AAAA,IACrB,CAAC,KAAK,QAAQ;AAEZ,YAAM,OAAO,IAAI,KAAK,KAAK,MAAM,IAAI,EAAE,MAAM,EAAE,EAAE,KAAK,IAAI;AAE1D,cAAQ,MAAM;AAAA,QACZ,KAAK;AACH,cAAI,QAAQ,KAAK,IAAI,QAAQ;AAC7B,cAAI,MAAM,KAAK;AAAA,YACb,QAAQ,IAAI;AAAA,YACZ,UAAU,IAAI;AAAA,YACd,SAAS,IAAI;AAAA,UACf,CAAC;AACD;AAAA,QACF,KAAK;AACH,cAAI,WAAW,KAAK,IAAI,QAAQ;AAChC,cAAI,SAAS,KAAK;AAAA,YAChB,QAAQ,IAAI,KAAK,MAAM;AAAA,YACvB,WAAW,IAAI;AAAA,YACf,aAAa,IAAI,KAAK,MAAM;AAAA,YAC5B,SAAS,IAAI;AAAA,UACf,CAAC;AACD;AAAA,MACJ;AACA,aAAO;AAAA,IACT;AAAA,IACA,EAAE,UAAU,CAAC,GAAG,OAAO,CAAC,GAAG,SAAS,CAAC,GAAG,YAAY,CAAC,EAAE;AAAA,EACzD;AAEA,SAAO;AAAA,IACL,MAAM;AAAA,IACN;AAAA,IACA;AAAA,EACF;AACF;","names":[]}